<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sys.defect">
	<sql id="defectInfoSql">
		(	select 
				row_number() over (order by vhcl_reg_no asc) as rn,
				vin,
				defects_sn,
				vhcl_reg_no,
				ocrn_dt,
				defects_type_cd,
				prcs_stts_cd,
				defects_cn,
				co_nm,
				crrtvact_rslt,
				case crrtvact_rslt when 'Y' then '조치' when 'N' then '미조치' else '-' end as crrtvact_rslt_nm
				from (
					select 
						t0.vin,
						t0.vhcl_reg_no,
						t1.defects_sn ,
						TO_CHAR(t1.ocrn_dt,'YYYY-MM-DD') as ocrn_dt,
						t1.defects_type_cd ,
						t1.prcs_stts_cd ,
						coalesce(t1.defects_cn,'-') as  defects_cn,
						t2.co_nm,
						coalesce((select cmptn_yn from dvs_rac_mt_defect_actn where t1.vin = vin),'-') as crrtvact_rslt
					from dvs_rac_mt_car t0 left join dvs_rac_mt_defect t1 on t0.vin = t1.vin
					left join (select * from (
						select crno, 
							   co_nm ,
							   ROW_NUMBER() OVER (PARTITION BY crno ORDER BY co_nm asc) AS RNK 	   
						from dvs_rac_mt_agency 
					) as ta where rnk ='1') t2 on t0.crno  = t2.crno 
				) Tm
				where defects_type_cd is not null 
			<if test="coNm != '' and coNm != null">
	           	and co_nm like '%' || #{coNm} ||'%'
			</if>
			<if test="vhclRegNo != '' and vhclRegNo != null">
	           	and vhcl_reg_no like '%' || #{vhclRegNo} ||'%'
			</if>
			<if test="crrtvactRslt != '' and crrtvactRslt != null">
	           	and crrtvact_rslt = #{crrtvactRslt}
			</if>
			<if test ='startDt != null and startDt != ""'>
		        AND ocrn_dt::TIMESTAMP <![CDATA[>=]]>  #{startDt}::TIMESTAMP
		    </if>
		    <if test ='endDt != null and endDt != ""'>
		        AND ocrn_dt::TIMESTAMP <![CDATA[<=]]> #{endDt}::TIMESTAMP
		    </if>	
		    ) as Ta
	</sql>
	
		<sql id="carQuery">
	(
		select * from(
			select
				row_number() over() as rn ,
				car.vhcl_reg_no,
				car.vin,
				car.carmdl,
				car.mdlyr,
				car.vhcl_nm,
				car.bzmn_sn,
				car.crno,
				car.ownr_nm,
				(select brno from dqvs.dvs_rac_mt_agency drma where bzmn_sn = car.bzmn_sn),
				car.engine_fom,
				case car.use_yn  when 'Y' then '사용' when 'N' then '미사용' else '미상' END AS use_yn ,
				to_char(car.reg_dt, 'YYYY-MM-DD HH24:MI') reg_dt
				from dqvs.dvs_rac_mt_car car
				where 1=1
				<if test="searchWrd != '' and searchWrd != null">
					and car.vhcl_reg_no like '%' || #{searchWrd} || '%'
				</if>
				<if test="bzmnSn != '' and bzmnSn != null">
					and car.crno = (select crno from dqvs.dvs_rac_mt_agency where bzmn_sn = #{bzmnSn} )
				</if>
		) T
		WHERE 1 = 1
		ORDER BY T.rn ASC
		limit 100
	) as t0
	</sql>


	<select id="selectDefectInfo" resultType="map">
	<!-- 	대여차량 결함정보 조회 -->
	select * from 
		<include refid="defectInfoSql" />
	<if test="take != '' and take != null">
		WHERE Ta.rn  <![CDATA[<=]]> (CAST(#{take} AS INTEGER) + CAST(#{skip} AS INTEGER))
	</if>
	<if test="skip != '' and skip != null">
		AND Ta.rn <![CDATA[>]]> CAST(#{skip} AS INTEGER)
	</if>
	</select>
	
	<select id="selectDefectInfoCnt" resultType="int">
	<!-- 	대여차량 결함정보 조회 cnt-->
		SELECT
			COUNT(*)
		FROM
			<include refid="defectInfoSql"/>	
	</select>
	
	<select id="selectCarInfoList" resultType="map">
	<!-- 	차량등록번호 중복확인 대여차량 정보  -->
	select 
		coalesce(vin, '-') as vin, 
		coalesce(vhcl_reg_no,'-') as vhcl_reg_no,   
		coalesce(carmdl,'-') as carmdl,  
		coalesce(mdlyr,'-') as mdlyr,  
		coalesce(vhcl_nm,'-') as vhcl_nm,  
		coalesce(engine_fom,'-') as engine_fom,  
		coalesce(use_yn,'-') as use_yn, 
		coalesce(t1.sgg_cd,'-') as sgg_cd, 
		coalesce(brno ,'-') as brno,
		coalesce(rmrk,'-') as rmrk,
		co_nm
	from (
		select * from dvs_rac_mt_car where vhcl_reg_no = #{vhclRegNo} 
	) t0 left join (select crno, brno, sgg_cd, co_nm from dvs_rac_mt_agency) t1 on t0.crno = t1.crno
	limit 1
	</select>
	
	<select id="selectDefectList" resultType="map">
	<!-- 차량등록번호 중복확인 차량 결험 정보 List-->
		select * from dvs_rac_mt_defect where vin = (select vin from dvs_rac_mt_car where vhcl_reg_no = #{vhclRegNo})
	</select>
	
	<update id="updateDefect" parameterType="paraMap">
	/*대여차량 결함정보 수정*/
		update dvs_rac_mt_defect 
		set 
			prcs_stts_cd = #{prcs_stts_cd},
			defects_cn = #{defects_cn},
			defects_type_cd = #{defects_type_cd},
			ocrn_dt = #{ocrn_dt} ::TIMESTAMP
		where vin = #{vin} AND 	defects_sn = #{defects_sn}
	</update>
	
	
	<insert id="insertDefect" parameterType="paraMap">
	/*시정조치 결과 등록*/
INSERT INTO dvs_rac_mt_defectActn ( 
			  vin
			, defects_recall_no
			, defects_reg_no
			, vhcl_no
			, co_nm
			, crrtvact_type
			, crrtvact_rslt
			, crrtvact_cn
			, crrtvact_day
			, crrtvact_yn
			, rgtr_sn
			, reg_dt
			, mdfr_sn
			, mdfcn_dt
			, atch_file_sn
			, rmrk
			) VALUES (
				  #{vin}
				, #{actnSn}
				, #{defectSn}
				, #{regCarNo}
				, #{coNm}
				, #{actnTyCd}
				, #{actnRsCd}
				, #{actnCn}
				, #{actnDt}::timestamp
				, #{actnYn}
				, #{userSn} ::numeric
				, now()::timestamp
				, null
				, null
				, #{actnFileAtchSn}
				, #{rmrk}
			)
	</insert>
	
	<update id="deleteDefect" parameterType="paraMap">
		/*조치내용 삭제*/
<!-- 		update -->
<!-- 			  actnSn = null -->
<!-- 			, actnTyCd = null -->
<!-- 			, actnRsCd = null -->
<!-- 			, actnCn = null -->
<!-- 			, actnDt = null -->
<!-- 			, actnYn = null -->
<!-- 			, affilitn = null -->
<!-- 			, regCarNo = null -->
<!-- 			, defectSn = null -->
<!-- 			, regNm = null -->
<!-- 			, regDt = null -->
<!-- 			, rmrk = null -->
<!-- 			dvs_rac_mt_defect  -->
<!-- 		set where vin = #{vin} and defects_sn = #{defects_sn} -->
	</update>
	
	
	<select id="selectDetailDefectInfo" resultType="resultMap">
		select 
			defects_sn,
			defects_reg_no,
			vin,
			vhcl_reg_no,
			defects_cn,
			crrtvact_strt_day,
			userSn,
			prcs_stts_cd,
			crrtvact_yn,
			case crrtvact_yn when 'Y' then '시정 완료' when 'N' then '시정 미완료' else '-' end as crrtvact_yn_nm,
			reg_dt,
			cmptn_yn,
			case cmptn_yn when 'Y' then '조치 완료' when 'N' then '조치 미완료' else '-' end as cmptn_yn_nm,
			crrtvact_ttl
		from (	 
			select 
				defects_sn,
				coalesce(actn.defects_reg_no,'-') as defects_reg_no, 
				defect.vin, 
				vhcl_reg_no,
				defects_cn,
				crrtvact_strt_day,
				#{userSn} ::numeric as userSn,
				prcs_stts_cd, 
				actn.crrtvact_yn, 
				actn.reg_dt,
				cmptn_yn ,
				coalesce(crrtvact_ttl,'-') as crrtvact_ttl
			from 
				(select * from dvs_rac_mt_defect) defect 
			left join 
				dvs_rac_mt_defect_actn actn 
			on defect.vin = actn.vin
			left join 
			 	dvs_rac_mt_car car 
			on defect.vin = car.vin
			where defect.vin = #{vin}
		) t1	
	</select>
	
	<select id="selectDetailDefectInfoCnt" resultType="int">
	select 
		count(*) 
	from (
		select	
			defects_sn, 
			defects_reg_no,
			vin,
			vhcl_reg_no,
			defects_cn,
			crrtvact_strt_day,
			userSn,
			prcs_stts_cd,
			crrtvact_yn,
			case crrtvact_yn when 'Y' then '시정 완료' when 'N' then '시정 미완료' else '-' end as crrtvact_rslt_nm,
			reg_dt,
			cmptn_yn,
			case cmptn_yn when 'Y' then '조치 완료' when 'N' then '조치 미완료' else '-' end as crrtvact_rslt_nm,
			crrtvact_ttl
		from (	 
			select 
				defects_sn,
				actn.defects_reg_no, 
				defect.vin, 
				vhcl_reg_no,
				defects_cn,
				crrtvact_strt_day,
				#{userSn} ::numeric as userSn,
				prcs_stts_cd, 
				actn.crrtvact_yn, 
				actn.reg_dt,
				cmptn_yn,
				coalesce(crrtvact_ttl,'-') as crrtvact_ttl
			from 
				(select * from dvs_rac_mt_defect) defect 
			left join 
				dvs_rac_mt_defect_actn actn 
			on defect.vin = actn.vin
			left join 
			 	dvs_rac_mt_car car 
			on defect.vin = car.vin
			where defect.vin = #{vin}
		) as t1 	
	) as t2
	</select>
	
	
	 
    <select id="selectCtpvNm" resultType="map">
    <!--  - 시도(전체) -->
        select distinct
		    substring(stdg_cd, 1, 2) AS ctpv_cd, 
		    ctpv_nm
		from
		    dqvs.dvs_cmm_mt_area
		where mtnabn_yn = 'Y'
		order by
		    ctpv_cd
    </select>
    
    
    <select id="selectSggNm" resultType="map">
    <!--  - 시군구(전체) -->
        select distinct
			SUBSTRING(stdg_cd, 3, 3) AS sgg_cd, 
			sgg_nm,
			SUBSTRING(stdg_cd,0,5) as full_sgg_cd
		from dqvs.dvs_cmm_mt_area
		where mtnabn_yn = 'Y'
			and sgg_nm != ''
		<if test="ctpvCd != null and ctpvCd != ''">
			and stdg_cd LIKE CONCAT(#{ctpvCd}, '%')
		</if>
		order by sgg_cd
    </select>
    
    <select id="CarList" resultType="resultMap">
	    select * from 
			<include refid="carQuery" />
		<if test="take != '' and take != null">
			LIMIT #{take} OFFSET #{skip}
		</if>
	</select>
	
	<select id="CarListCnt" resultType="int">
		SELECT COUNT(*) FROM (
			SELECT * FROM (
				SELECT
					row_number() over() as rn ,
				car.vhcl_reg_no,
				car.vin,
				car.carmdl,
				car.mdlyr,
				car.vhcl_nm,
				car.bzmn_sn,
				car.ownr_nm,
				(select brno from dqvs.dvs_rac_mt_agency drma where bzmn_sn = car.bzmn_sn),
				car.engine_fom,
				case car.use_yn  when 'Y' then '사용' when 'N' then '미사용' else '미상' END AS use_yn ,
				to_char(car.reg_dt, 'YYYY-MM-DD HH24:MI') reg_dt
				from dqvs.dvs_rac_mt_car car
				where 1=1
				<if test="searchWrd != '' and searchWrd != null">
					and car.vhcl_reg_no like '%' || #{searchWrd} || '%'
				</if>
				<if test="bzmnSn != '' and bzmnSn != null">
					and car.crno = (select crno from dqvs.dvs_rac_mt_agency where bzmn_sn = #{bzmnSn} )
				</if>
			) AS T
			WHERE 1=1
			ORDER BY T.rn ASC
			limit 100
		) AS C
	</select>
    

</mapper>