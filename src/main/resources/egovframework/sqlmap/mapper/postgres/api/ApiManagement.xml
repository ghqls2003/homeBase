<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mm.apimanagement">


	<select id="selectlistView" parameterType="paraMap" resultType="resultMap">
				SELECT T.*
			FROM (
			    SELECT
			        ROW_NUMBER() OVER (ORDER BY ORG.dmnd_dt desc) AS RN,
			        ORG.*
			    FROM (
			        SELECT 
			            dams.dmnd_dt,
			            dams.user_sn,
			            dams.api_sn as damsApi,
			            dcms.user_id,
			            dcmu.ogdp_nm,
			            dcmu.bzmn_sn,
			            dqvs.fn_get_cdnm('api_stts_cd', stts_cd) AS cdNm,
			            dams.expry_ymd,
			            dams.aprv_dt,
			            dami.api_nm,
			            COUNT(dahr.api_sn) as sec
			        FROM dqvs.dvs_api_mt_stts dams
			        LEFT JOIN dqvs.dvs_api_mt_info dami ON dami.api_sn = dams.api_sn 
			        LEFT JOIN dqvs.dvs_cmm_mt_sso dcms ON dcms.user_sn = dams.user_sn 
			        LEFT JOIN dqvs.dvs_cmm_mt_user dcmu ON dcmu.user_sn = dams.user_sn  
			        LEFT JOIN dqvs.dvs_api_hs_req dahr ON dahr.api_sn = dams.api_sn and dahr.user_sn = dams.user_sn
			        WHERE 
			         dams.dmnd_dt BETWEEN TO_DATE(#{startPicker02}, 'yyyy-mm-dd') AND TO_DATE(#{endPicker02}, 'yyyy-mm-dd')+1
<!-- 			        <if test ="searchSttsCd != '' and searchSttsCd != null"> -->
<!-- 			        and dami.api_nm LIKE '%' || LOWER(#{searchReq}) || '%' -->
<!-- 			        </if> -->
			        <if test ="searchSttsCd == 'ApiNm2'">
			        and dami.api_nm LIKE '%' || LOWER(#{searchReq}) || '%'
			        </if>
			        <if test ="searchSttsCd == 'userId2'">
			        and dcms.user_id LIKE '%' || LOWER(#{searchReq}) || '%'
			        </if>
			        <if test ="searchSttsCd2 == 'Q1'">
			        and dams.stts_cd = '1'
			        </if>
			        <if test ="searchSttsCd2 == 'Q2'">
			        and dams.stts_cd = '2'
			        </if>
			        <if test ="searchSttsCd2 == 'Q3'">
			        and dams.stts_cd = '3'
			        </if>
			        <if test ="searchSttsCd2 == 'Q4'">
			        and dams.stts_cd = '4'
			        </if>
			        <if test ="apiSn != '' and apiSn != null">
			        and dams.api_sn = #{apiSn}
			        </if>
			        <if test ="userSn != '' and userSn != null">
			        and dams.user_sn = #{userSn}
			        </if>
			        GROUP BY dams.dmnd_dt, dams.user_sn, dams.api_sn, dcms.user_id, dcmu.ogdp_nm, dcmu.bzmn_sn, dqvs.fn_get_cdnm('api_stts_cd', stts_cd), dams.expry_ymd, dams.aprv_dt, dami.api_nm
			    ) ORG
			) T
			WHERE 1 = 1
			<if test="take != '' and take != null">
			    AND T.rn <![CDATA[<=]]>(CAST(#{take} AS INTEGER) + CAST(#{skip} AS INTEGER))
			</if>
			<if test="skip != '' and skip != null">
			    AND T.rn <![CDATA[>]]>CAST(#{skip} AS INTEGER)
			</if>
			ORDER BY T.RN asc
   </select>
   		
   <select id="selectlistViewCnt" resultType="int">
    	select count(*) from (
	    	SELECT 
			    dahr.api_sn,
			    MAX(dcms.user_id) AS user_id,
			    MAX(dcmu.ogdp_nm) AS ogdp_nm,
			    MAX(dcmu.bzmn_sn) AS bzmn_sn,
			    MAX(dqvs.fn_get_cdnm('api_stts_cd', stts_cd)) AS cdNm,
			    MAX(dams.expry_ymd) AS expry_ymd,
			    MAX(dams.aprv_dt) AS aprv_dt,
			    max(dami.api_nm) AS api_nm,
			    COUNT(dahr.dmnd_parameter)
			FROM dqvs.dvs_api_mt_stts dams
			LEFT JOIN dqvs.dvs_api_mt_info dami ON dami.api_sn = dams.api_sn 
			LEFT JOIN dqvs.dvs_cmm_mt_sso dcms ON dcms.user_sn = dams.user_sn 
			LEFT JOIN dqvs.dvs_cmm_mt_user dcmu ON dcmu.user_sn = dams.user_sn  
			LEFT JOIN dqvs.dvs_api_hs_req dahr ON dahr.user_sn = dams.user_sn AND dahr.api_sn = dams.api_sn
			WHERE 1=1 
			GROUP BY dahr.api_sn 
		) a
    </select>
    	<select id="selectdetailApiList" parameterType="paraMap" resultType="resultMap">
				SELECT T.*
			FROM (
			    SELECT
			        ROW_NUMBER() OVER (ORDER BY ORG.dmnd_dt ASC) AS RN,
			        ORG.*
			    FROM (
			        SELECT 
			            dams.dmnd_dt,
			            dams.user_sn,
			            dams.api_sn as damsApi,
			            dcms.user_id,
			            dcmu.ogdp_nm,
			            dcmu.bzmn_sn,
			            dqvs.fn_get_cdnm('api_stts_cd', stts_cd) AS cdNm,
			            dams.expry_ymd,
			            dams.aprv_dt,
			            dami.api_nm,
			            COUNT(dahr.api_sn) as sec
			        FROM dqvs.dvs_api_mt_stts dams
			        LEFT JOIN dqvs.dvs_api_mt_info dami ON dami.api_sn = dams.api_sn 
			        LEFT JOIN dqvs.dvs_cmm_mt_sso dcms ON dcms.user_sn = dams.user_sn 
			        LEFT JOIN dqvs.dvs_cmm_mt_user dcmu ON dcmu.user_sn = dams.user_sn  
			        LEFT JOIN dqvs.dvs_api_hs_req dahr ON dahr.api_sn = dams.api_sn and dahr.user_sn = dams.user_sn
			        WHERE 1=1 
			        AND dams.dmnd_dt BETWEEN TO_DATE(#{startPicker02}, 'yyyy-mm-dd') AND TO_DATE(#{endPicker02}, 'yyyy-mm-dd')+1
			        and dams.api_sn = #{apiSn}
			        and dams.user_sn = #{userSn}
			        GROUP BY dams.dmnd_dt, dams.user_sn, dams.api_sn, dcms.user_id, dcmu.ogdp_nm, dcmu.bzmn_sn, dqvs.fn_get_cdnm('api_stts_cd', stts_cd), dams.expry_ymd, dams.aprv_dt, dami.api_nm
			    ) ORG
			) T
			WHERE 1 = 1
			<if test="take != '' and take != null">
			    AND T.rn <![CDATA[<=]]>(CAST(#{take} AS INTEGER) + CAST(#{skip} AS INTEGER))
			</if>
			<if test="skip != '' and skip != null">
			    AND T.rn <![CDATA[>]]>CAST(#{skip} AS INTEGER)
			</if>
			ORDER BY T.RN asc
   </select>
   
      <select id="selectdetailApiListCnt" resultType="int">
    	select count(*) from (
	    	SELECT 
			    dahr.api_sn,
			    MAX(dcms.user_id) AS user_id,
			    MAX(dcmu.ogdp_nm) AS ogdp_nm,
			    MAX(dcmu.bzmn_sn) AS bzmn_sn,
			    MAX(dqvs.fn_get_cdnm('api_stts_cd', stts_cd)) AS cdNm,
			    MAX(dams.expry_ymd) AS expry_ymd,
			    MAX(dams.aprv_dt) AS aprv_dt,
			    max(dami.api_nm) AS api_nm,
			    COUNT(dahr.dmnd_parameter)
			FROM dqvs.dvs_api_mt_stts dams
			LEFT JOIN dqvs.dvs_api_mt_info dami ON dami.api_sn = dams.api_sn 
			LEFT JOIN dqvs.dvs_cmm_mt_sso dcms ON dcms.user_sn = dams.user_sn 
			LEFT JOIN dqvs.dvs_cmm_mt_user dcmu ON dcmu.user_sn = dams.user_sn  
			LEFT JOIN dqvs.dvs_api_hs_req dahr ON dahr.user_sn = dams.user_sn AND dahr.api_sn = dams.api_sn
			WHERE 1=1 
			GROUP BY dahr.api_sn 
		) a
    </select>
    
    <update id="updateReuseApiUse">
       		UPDATE dqvs.dvs_api_mt_stts
      		  SET stts_cd= 2,
      		  aprv_dt = now()
				where 
					<if test ="apiSn != '' and apiSn != null">
						api_sn = #{apiSn}::numeric
						and user_sn = #{userSn}::numeric
				    </if>	
    </update>
    <update id="updateStopApiUse">
       		UPDATE dqvs.dvs_api_mt_stts
      		  SET stts_cd= 4,
      		  aprv_dt = now()
				where
					<if test ="apiSn != '' and apiSn != null">
						 api_sn = #{apiSn}::numeric
					</if>		
					<if test ="userSn != '' and userSn != null">
						and user_sn = #{userSn}::numeric
					</if>	 

    </update>
    <update id="updateApproveApiUse">
       		UPDATE dqvs.dvs_api_mt_stts
      		  SET stts_cd= 2,
      		  aprv_dt = now()
				where
					<if test ="apiSn != '' and apiSn != null">
						 api_sn = #{apiSn}::numeric
				    </if>		
					<if test ="userSn != '' and userSn != null">
						and user_sn = #{userSn}::numeric
					</if>	 				    		

    </update>
    <update id="updateRejectApiUse">
       		UPDATE dqvs.dvs_api_mt_stts
      		  SET stts_cd= 3,
      		  rjct_dt = now(),
      		   aprv_dt = CASE
                WHEN aprv_dt IS NOT NULL THEN NULL
                ELSE aprv_dt
             END
				where 
					<if test ="apiSn != '' and apiSn != null">
						api_sn = #{apiSn}::numeric
				    </if>
					<if test ="userSn != '' and userSn != null">
						and user_sn = #{userSn}::numeric
					</if>					    

    </update>
    		
    
    
</mapper>