<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="vfc.rentIdp">
	<sql id="rentIdpList1">
	(
	select  
		row_number() over ( order by rentIdp.reg_dt desc) as rn,
		rent_no,
		co_nm,
		vhcl_reg_no,
		TO_CHAR(rentIdp.reg_dt, 'YYYY-MM-DD HH24:MI') reg_dt,
		TO_CHAR(rent_bgng_dt, 'YYYY-MM-DD HH24:MI') rent_bgng_dt,
		TO_CHAR(rent_end_dt, 'YYYY-MM-DD HH24:MI') rent_end_dt,
		rent_stts_cd,
		rent_stts_nm,
		rent_no,
		rentIdp.mdfcn_dt,
		agency.reg_cmptnc_cd,
		rentIdp.bzmn_sn
	from (
		select 			
			rent_no,
			vhcl_reg_no,
			vin,
			bzmn_sn,
			rent_bgng_dt,
			rent_end_dt,
			atch_file_sn,
			sgg_cd,
			rent_stts_cd,
			CASE rent_stts_cd WHEN '1' THEN '미확정' WHEN '2' THEN '대여확정' WHEN '9' THEN '대여취소' ELSE rent_stts_cd END rent_stts_nm,
			oneway_yn,
			del_yn,
			rmrk,
			rgtr_sn,
			reg_dt,
			reg_ip,
			mdfr_sn,
			mdfcn_dt,
			mdfcn_ip
		from dvs_dqv_mt_rent_idp 
	) rentIdp left outer join dvs_rac_mt_agency agency on rentIdp.bzmn_sn = agency.bzmn_sn
	where 1=1
			<if test='authrtCd.indexOf("Z") == -1 and authrtCd.indexOf("M") == -1 and authrtCd.indexOf("K") == -1'>
				AND rentIdp.del_yn = 'N'
			</if>
			<if test="vhclRegNo != '' and vhclRegNo != null">
	           	AND vhcl_reg_no like '%' || #{vhclRegNo} ||'%'
			</if>
			<if test="coNm != '' and coNm != null">
	           	and co_nm like '%' || #{coNm} ||'%'
			</if>
			<if test ='rentDt != null and rentDt != ""'>
		 		and rent_bgng_dt::DATE <![CDATA[<=]]> #{rentDt}::DATE AND rent_end_dt::DATE <![CDATA[>=]]> #{rentDt}::DATE
		    </if>
			<choose>
		        <when test='authrtCd.indexOf("Z") != -1 or authrtCd.indexOf("M") != -1 or authrtCd.indexOf("K") != -1'> <!-- 관리자/공단/국토부 : 전체목록 -->
		       		AND 1=1
		        </when>
		        <when test='authrtCd.indexOf("G") != -1'> <!-- 지자체 : 관할지역 내 사업자의 대여이력 -->
		        	AND agency.reg_cmptnc_cd LIKE #{cmptncZoneCd} || '%'
		        </when>
		        <when test='authrtCd.equals("S01") or authrtCd.equals("S04")'> <!-- 주사무소관리자 : 해당 사용자의 사업자일련번호를 가진 사용자 또는 해당 사업자 일련번호를 상위 사업자로 가지는 업체의 사용자가 조회한 건까지 표시 -->
					AND (rentIdp.bzmn_sn IN (SELECT bzmn_sn FROM dqvs.dvs_rac_mt_agency WHERE up_brno  = #{bzmnSn})
					OR rentIdp.bzmn_sn = #{bzmnSn})
		        </when>
		        <when test='authrtCd.equals("S02")'> <!-- 영업소관리자 : 해당 사업자일련번호를 가진 사용자가 조회한 건만 표시  -->
					AND rentIdp.bzmn_sn = #{bzmnSn}
		        </when>
		        <otherwise> <!-- 그 외는 소속 회사의 대여 건만 표시 -->
					<if test="bzmnSn != '' and bzmnSn != null">
	                	AND rentIdp.bzmn_sn = #{bzmnSn}
					</if>
		        </otherwise>
			</choose>
	) as t0	
	</sql>
	
	<sql id="carQuery">
	(
		select * from(
			select
				row_number() over() as rn ,
				car.vhcl_reg_no,
				car.vin,
				car.carmdl,
				car.mdlyr,
				car.vhcl_nm,
				car.bzmn_sn,
				car.crno,
				car.ownr_nm,
				(select brno from dqvs.dvs_rac_mt_agency agency where bzmn_sn = car.bzmn_sn),
				car.engine_fom,
				case car.use_yn  when 'Y' then '사용' when 'N' then '미사용' else '미상' END AS use_yn ,
				to_char(car.reg_dt, 'YYYY-MM-DD HH24:MI') reg_dt
				from dqvs.dvs_rac_mt_car car
				where 1=1
				<if test="searchWrd != '' and searchWrd != null">
					and car.vhcl_reg_no like '%' || #{searchWrd} || '%'
				</if>
				<if test="bzmnSn != '' and bzmnSn != null">
					and car.crno = (select crno from dqvs.dvs_rac_mt_agency where bzmn_sn = #{bzmnSn} )
				</if>
		) T
		WHERE 1 = 1
		ORDER BY T.rn ASC
	) as t0
	</sql>
	
	<select id="selectRentIdpList" resultType="resultMap">
	<!-- 	 국제면허 대여정보 리스트 -->	
	select * from 
			<include refid="rentIdpList1" />
	<if test="take != '' and take != null">
		LIMIT #{take} OFFSET #{skip}
	</if>	
	</select>
	
		
    <select id="selectRentIdpListCnt" resultType="int">
    <!-- 	 국제면허 대여정보 리스트 Cnt-->
		select count(*)
		from 
			<include refid="rentIdpList1" />
    </select>
    
    <select id="detailRentInfo" resultType="resultMap">
    /*대여이력 상세*/
    	SELECT rentIdp.rent_no
			, rentIdp.vhcl_reg_no
			, '국제면허' lcns_idntf_nm 
			, rentIdp.atch_file_sn
			, COALESCE(dcmi.atch_file_nm, '-') atch_file_nm
			, TO_CHAR(rentIdp.rent_bgng_dt, 'YYYY-MM-DD HH24:MI') rent_bgng_dt
			, TO_CHAR(rentIdp.rent_end_dt, 'YYYY-MM-DD HH24:MI') rent_end_dt
			, rentIdp.rent_stts_cd
			, rentIdp.del_yn
			, CASE rentIdp.rent_stts_cd WHEN '1' THEN '미확정' WHEN '2' THEN '대여확정' WHEN '9' THEN '대여취소' 
				ELSE rentIdp.rent_stts_cd END rent_stts_nm
		FROM
			(select * from dvs_dqv_mt_rent_idp) rentIdp
		LEFT JOIN
			dqvs.dvs_rac_mt_car car
		ON rentIdp.vin = car.vin
		LEFT JOIN
			dqvs.dvs_cmm_mt_intrlcnsfile dcmi
		ON rentIdp.atch_file_sn = dcmi.file_sn
		WHERE rentIdp.rent_no = #{rentNo}
    </select>
    
    
    <update id="updateRentInfo">
    /*대여이력 상세 수정*/
	UPDATE dvs_dqv_mt_rent_idp
		<choose>
			<when test="rentSttsCd.equals('cancel')">
				SET rent_stts_cd = '9',
	        	rent_end_dt = #{rentEndDt}::timestamp,
	        	rent_bgng_dt= #{rentBgngDt}::timestamp,
	        	mdfcn_ip= #{IP},
	        	mdfr_sn= #{userSn}::numeric,
	        	mdfcn_dt= now()::timestamp
			</when>
			<when test="rentSttsCd.equals('confirmed')">
				SET rent_stts_cd = '2',
	        	mdfcn_ip= #{IP},
	        	mdfr_sn= #{userSn}::numeric,
	        	mdfcn_dt= now()::timestamp
			</when>
			<otherwise>
				SET
				<if test="vin != '' and vin != null">
					vin = #{vin},
				</if>
				<if test="rgtrSn != '' and rgtrSn != null">
					rgtr_sn = #{rgtrSn}::numeric,
				</if>
				<if test="vhclRegNo != '' and vhclRegNo != null">
					vhcl_reg_no = #{vhclRegNo},
				</if>
				<if test="bzmnSn != '' and bzmnSn != null">
					bzmn_sn = #{bzmnSn},
				</if>
	        	rent_end_dt = #{rentEndDt}::timestamp,
	        	rent_bgng_dt= #{rentBgngDt}::timestamp,
	        	mdfcn_ip= #{IP},
	        	mdfr_sn= #{userSn}::numeric,
	        	mdfcn_dt= now()::timestamp
			</otherwise>
		</choose>
			WHERE rent_no = #{rentNo}
    </update>
    
	<select id="CarList" resultType="resultMap">
	    select * from 
			<include refid="carQuery" />
		<if test="take != '' and take != null">
			LIMIT #{take} OFFSET #{skip}
		</if>
	</select>
	
	<select id="CarListCnt" resultType="int">
		SELECT COUNT(*) FROM (
			SELECT * FROM (
				SELECT
					row_number() over() as rn ,
				car.vhcl_reg_no,
				car.vin,
				car.carmdl,
				car.mdlyr,
				car.vhcl_nm,
				car.bzmn_sn,
				car.ownr_nm,
				(select brno from dqvs.dvs_rac_mt_agency agency where bzmn_sn = car.bzmn_sn),
				car.engine_fom,
				case car.use_yn  when 'Y' then '사용' when 'N' then '미사용' else '미상' END AS use_yn ,
				to_char(car.reg_dt, 'YYYY-MM-DD HH24:MI') reg_dt
				from dqvs.dvs_rac_mt_car car
				where 1=1
				<if test="searchWrd != '' and searchWrd != null">
					and car.vhcl_reg_no like '%' || #{searchWrd} || '%'
				</if>
				<if test="bzmnSn != '' and bzmnSn != null">
					and car.crno = (select crno from dqvs.dvs_rac_mt_agency where bzmn_sn = #{bzmnSn} )
				</if>
			) AS T
			ORDER BY T.rn ASC
		) AS C
	</select>

	<!--대여정보 테이블에서 대여번호로 조회-->
	<select id="RentMtInfo" resultType="resultMap">
		select *
		from dvs_dqv_mt_rent_idp
		where rent_no = #{rentNo}
	</select>
	
	<update id="updateDeleteYn">
			UPDATE dvs_dqv_mt_rent_idp
			SET del_yn = 'Y',
				mdfcn_ip= #{IP},
				mdfr_sn= #{userSn}::numeric,
				mdfcn_dt= now()::timestamp
			WHERE rent_no = #{rentNo}
	</update>
		
	<insert id="insertRentReg">
			INSERT INTO dqvs.dvs_dqv_mt_rent_idp
				(rent_no,
				vin,
				vhcl_reg_no,
				<if test="bzmnSn != '' and bzmnSn != null">
				bzmn_sn,
				</if>
				<if test="cmptncZoneCd != '' and cmptncZoneCd != null">
				sgg_cd,
				</if>
				rent_bgng_dt,
				rent_end_dt,
				rent_stts_cd,
				rgtr_sn,
				reg_dt,
				<choose>
					<when test="atchFileSn != '' and atchFileSn != null">
						atch_file_sn,
					</when>
					<otherwise>
<!-- 						lcns_idntf_cd, -->
					</otherwise>
				</choose>
				reg_ip,
				del_yn
				)
			VALUES
				(((lpad(nextval(('seq_dvs_dqv_mt_rent_idp'::text )::regclass)::text, 9, '0'::text))),
				#{vin},
				#{vhclRegNo},
				<if test="bzmnSn != '' and bzmnSn != null">
				#{bzmnSn},
				</if>
				<if test="cmptncZoneCd != '' and cmptncZoneCd != null">
				#{cmptncZoneCd},
				</if>
				#{rentBgngDt}::timestamp,
				#{rentEndDt}::timestamp,
				'2',
				#{userSn}::numeric,
				now()::timestamp,
				<choose>
					<when test="atchFileSn != '' and atchFileSn != null">
<!-- 						#{lcnsIdntfCd}, -->
						#{atchFileSn},
					</when>
					<otherwise>
<!-- 						#{lcnsIdntfCd}, -->
					</otherwise>
				</choose>
				#{IP},
				'N'
				)
	</insert>
	
	<insert id="insertConfData">
		WITH car_info AS (
		    SELECT 
		        vin,
		        mdlyr,
		        vhcl_nm,
		        carmdl,
		        engine_fom,
		        use_yn
		    FROM dvs_rac_mt_car
		    WHERE vin = (SELECT vin FROM dqvs.dvs_dqv_mt_rent_idp WHERE rent_no = #{rentNo})
		)
		INSERT INTO dqvs.dvs_dqv_hs_conf
			(rent_no,
			cnfrmn_hstry_no,
			vhcl_reg_no,
			vin,
			bzmn_sn,
			rent_bgng_dt,
			rent_end_dt,
			atch_file_sn,
			sgg_cd,
			rgtr_sn,
			reg_dt,
			reg_ip,
			mdfr_sn,
			mdfcn_dt,
			mdfcn_ip,
			mdlyr,
			vhcl_nm,
			carmdl,
			engine_fom,
			use_yn,
			dln,
			rent_prcs_dt,
			lcns_idntf_cd)
			select
				rent_no,
				(select (COALESCE(count(cnfrmn_hstry_no), 0) + 1)::varchar as cnfrmn_hstry_no from dqvs.dvs_dqv_hs_conf where rent_no=#{rentNo}) cnfrmn_hstry_no ,
				vhcl_reg_no,
				rentIdp.vin,
				bzmn_sn,
				rent_bgng_dt,
				rent_end_dt,
				atch_file_sn,
				sgg_cd,
				rgtr_sn,
				reg_dt,
				reg_ip,
				#{userSn}::numeric,
				now()::timestamp,
				#{clientIP},
			  	car_info.mdlyr,
			    car_info.vhcl_nm,
			    car_info.carmdl,
			    car_info.engine_fom,
			    car_info.use_yn,
				null,
				null,
				2
			from dqvs.dvs_dqv_mt_rent_idp rentIdp
			JOIN car_info ON car_info.vin = rentIdp.vin
			WHERE rent_no = #{rentNo}
		order by rent_no
	</insert>
	
	<select id="BzmnSeCd" parameterType="map" resultType="string">
        SELECT bzmn_se_cd
        FROM dqvs.dvs_rac_mt_agency
        WHERE bzmn_sn = #{bzmnSn}
    </select>
	
		
 
</mapper>