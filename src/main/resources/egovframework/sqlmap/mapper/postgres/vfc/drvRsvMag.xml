<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="vfc.drvRsvMag">

	<sql id ='RentalistSql'>
			select
				row_number() over(order by rent.rent_prcs_dt desc) rn,
				rent.rent_no,
				rent.vhcl_reg_no,
				rent.dln,
				rent.vrfc_hstry_sn,
				agency.co_nm,
				to_char(rent.rent_bgng_dt,
				'YYYY-MM-DD HH24:MI') as rent_bgng_dt,
				to_char(rent.rent_end_dt,
				'YYYY-MM-DD HH24:MI') as rent_end_dt,
				to_char(rent.rent_prcs_dt,
				'YYYY-MM-DD HH24:MI') as rent_prcs_dt,
				rent.bzmn_sn,
				to_char(rent.reg_dt,
				'YYYY-MM-DD HH24:MI') as reg_dt
			from
				(
					select
						base.rent_no,
						base.rent_prcs_dt,
						base.lcns_idntf_cd,
						base.vhcl_reg_no,
						base.bzmn_sn,
						base.rent_bgng_dt,
						base.rent_end_dt ,
						base.rent_stts_cd,
						base.vrfc_hstry_sn,
						base.del_yn,
						base.rgtr_sn,
						base.reg_dt,
						base.mdfcn_dt
					from
<!-- 						dqvs.dvs_dqv_mt_rent_dump base -->
						dqvs.dqvs.dvs_dqv_mt_rent base
					where
						1 = 1
						and base.rent_prcs_dt is not null
						and base.rent_stts_cd = '2'
						and (base.rent_end_dt::timestamp - base.rent_bgng_dt::timestamp) > interval '7 days' ) as rent
				left outer join dqvs.dvs_rac_mt_agency agency on
					rent.bzmn_sn = agency.bzmn_sn

		   WHERE 
		   		 (CURRENT_TIMESTAMP between rent.rent_bgng_dt and rent.rent_end_dt)
		   <if test = 'searchWrd != null and searchWrd != ""'>
   					AND rent.rent_no like '%' || #{searchWrd} || '%'
		   </if>		 
		   <choose>
		        <when test='authrtCd.equals("S01") or authrtCd.equals("S04")'> <!-- 주사무소관리자 : 해당 사용자의 사업자일련번호를 가진 사용자 또는 해당 사업자 일련번호를 상위 사업자로 가지는 업체의 사용자가 조회한 건까지 표시 -->
					AND (rent.bzmn_sn IN (SELECT bzmn_sn FROM dqvs.dvs_rac_mt_agency WHERE up_brno  = #{bzmnSn})
					OR rent.bzmn_sn = #{bzmnSn})
		        </when>
		        <when test='authrtCd.equals("S02")'> <!-- 영업소관리자 : 해당 사업자일련번호를 가진 사용자가 조회한 건만 표시  -->
					AND rent.bzmn_sn = #{bzmnSn}
		        </when>
		        <when test='authrtCd.equals("S03")'> <!-- 주사무소 일반회원, 영업소 일반회원에 따라 조건처리  -->
		            <if test="bzauthCd == 1">
		                AND (rent.bzmn_sn IN (SELECT bzmn_sn FROM dqvs.dvs_rac_mt_agency WHERE up_brno = #{bzmnSn})
		                OR rent.bzmn_sn = #{bzmnSn})
		            </if>
		            <if test="bzauthCd == 2">
		                AND rent.bzmn_sn = #{bzmnSn}
		            </if>
		        </when>
		        <otherwise> <!-- 그 외는 소속 회사의 대여 건만 표시 -->
					<if test="bzmnSn != '' and bzmnSn != null">
	                	AND rent.bzmn_sn = #{bzmnSn}
					</if>
		        </otherwise>
			</choose>
	</sql>
	<select id="RsvNoList" resultType="resultMap">
		select * 
		 from(
		 <include refid="RentalistSql"></include>
		 ) as T 
			<if test="take != '' and take != null">
				LIMIT #{take} OFFSET #{skip}
			</if>

	</select>
	<select id="RsvNoListCnt" resultType="int">
			select
				COUNT(*)
			from
				(
					select
						base.rent_no,
						base.rent_prcs_dt,
						base.lcns_idntf_cd,
						base.vhcl_reg_no,
						base.bzmn_sn,
						base.rent_bgng_dt,
						base.rent_end_dt ,
						base.rent_stts_cd,
						base.vrfc_hstry_sn,
						base.del_yn,
						base.rgtr_sn,
						base.reg_dt,
						base.mdfcn_dt
						<!-- 24.10.23 rent에 dln 없어짐 확인바람. -->
						<!-- 24.10.24 dln 삭제 확인 확인 이력에서 불러오기 -->
					from
<!-- 						dqvs.dvs_dqv_mt_rent_dump base -->
						dqvs.dvs_dqv_mt_rent base
					where
						1 = 1
						and base.rent_prcs_dt is not null
						and base.rent_stts_cd = '2'
						and (base.rent_end_dt::timestamp - base.rent_bgng_dt::timestamp) > interval '7 days' ) as rent
				left outer join dqvs.dvs_rac_mt_agency agency on
					rent.bzmn_sn = agency.bzmn_sn

		   WHERE
		   		(CURRENT_TIMESTAMP between rent.rent_bgng_dt and rent.rent_end_dt)
		   <if test = 'searchWrd != null and searchWrd != ""'>
   					AND rent.rent_no like '%' || #{searchWrd} || '%'
		   </if>
		   <choose>
		        <when test='authrtCd.equals("S01") or authrtCd.equals("S04")'> <!-- 주사무소관리자 : 해당 사용자의 사업자일련번호를 가진 사용자 또는 해당 사업자 일련번호를 상위 사업자로 가지는 업체의 사용자가 조회한 건까지 표시 -->
					AND (rent.bzmn_sn IN (SELECT bzmn_sn FROM dqvs.dvs_rac_mt_agency WHERE up_brno  = #{bzmnSn})
					OR rent.bzmn_sn = #{bzmnSn})
		        </when>
		        <when test='authrtCd.equals("S02")'> <!-- 영업소관리자 : 해당 사업자일련번호를 가진 사용자가 조회한 건만 표시  -->
					AND rent.bzmn_sn = #{bzmnSn}
		        </when>
		        <when test='authrtCd.equals("S03")'> <!-- 주사무소 일반회원, 영업소 일반회원에 따라 조건처리  -->
		            <if test="bzauthCd == 1">
		                AND (rent.bzmn_sn IN (SELECT bzmn_sn FROM dqvs.dvs_rac_mt_agency WHERE up_brno = #{bzmnSn})
		                OR rent.bzmn_sn = #{bzmnSn})
		            </if>
		            <if test="bzauthCd == 2">
		                AND rent.bzmn_sn = #{bzmnSn}
		            </if>
		        </when>
		        <otherwise> <!-- 그 외는 소속 회사의 대여 건만 표시 -->
					<if test="bzmnSn != '' and bzmnSn != null">
	                	AND rent.bzmn_sn = #{bzmnSn}
					</if>
		        </otherwise>
			</choose>
	</select>
<!-- 	<select id="RsvNoListCnt" resultType="int"> -->
<!-- 		select count(*) from( -->
<!-- 			<include refid="RentalistSql" /> -->
<!-- 		) T -->
	
<!-- 	</select> -->

		<select id="RentalHistList" resultType="resultMap">
			select
			*
			from
				(
				select
					row_number() over(order by T.reg_dt desc) rn ,
					*
					from
						(
						select
							ddvr.reg_dt,
							CASE
							WHEN ddvr.dln ~ '^[0-9]+$' THEN
							CONCAT(ddvr.dln, REPEAT('*', 12))
							ELSE
							CONCAT(SUBSTRING(dqvs.pca_decrypt(ddvr.dln, '150'), -5, LENGTH(dqvs.pca_decrypt(ddvr.dln, '150'))),
							REPEAT('*',6))
							END AS dln2,
							ddvr.mdfcn_dt,
							ddvr.rent_no ,
							ddvr.dln,
							dqvs.fn_get_cdnm('verify_cd', ddvr.lcns_asort_cd) as lcns_asort_cd ,
							(select sso_user_nm from v_intg_user_info vui where vui.user_sn =
							ddvr.mdfr_sn)as mdfr_nm,
							(select sso_user_nm from v_intg_user_info vui where vui.user_sn =
							ddvr.rgtr_sn)as reg_nm,
							agency.co_nm ,
							rent.bzmn_sn,
							ddvr.lcns_asort_cd,
							
<!-- 							ddvr.lcns_flnm, -->
							ddvr.lcns_asort_cd
						from dqvs.dvs_dqv_mt_rent rent
<!-- 						from dqvs.dvs_dqv_mt_rent_dump rent -->
						left outer join dqvs.dvs_rac_mt_agency agency on
						rent.bzmn_sn = agency.bzmn_sn
						left join dqvs.dvs_dqv_vrfc_rsvt ddvr on
						ddvr.rent_no = rent.rent_no
						where 
							ddvr.reg_dt <![CDATA[>=]]> #{startDt}::TIMESTAMP
							and ddvr.reg_dt <![CDATA[<=]]> #{endDt}::DATE + '23:59:59'::INTERVAL
				 		<if test="searchCd == 'E1'">
							and ddvr.rent_no like '%' || #{searchWrd} || '%'
						</if>

<!-- 				 		<if test="searchCd == 'E2'"> -->
<!-- 							and ddvr.lcns_flnm like '%' || #{searchWrd} || '%' -->
<!-- 						</if> -->
				 		<if test="lncdDrop != '' and lncdDrop != null">
							and ddvr.lcns_asort_cd = #{lncdDrop}
						</if>
					<choose>
				        <when test='authrtCd.equals("S01") or authrtCd.equals("S04")'> <!-- 주사무소관리자 : 해당 사용자의 사업자일련번호를 가진 사용자 또는 해당 사업자 일련번호를 상위 사업자로 가지는 업체의 사용자가 조회한 건까지 표시 -->
							AND (rent.bzmn_sn IN (SELECT bzmn_sn FROM dqvs.dvs_rac_mt_agency WHERE up_brno  = #{bzmnSn})
							OR rent.bzmn_sn = #{bzmnSn})
				        </when>
				        <when test='authrtCd.equals("S02")'> <!-- 영업소관리자 : 해당 사업자일련번호를 가진 사용자가 조회한 건만 표시  -->
							AND rent.bzmn_sn = #{bzmnSn}
				        </when>
				        <when test='authrtCd.equals("S03")'> <!-- 주사무소 일반회원, 영업소 일반회원에 따라 조건처리  -->
				            <if test="bzauthCd == 1">
				                AND (rent.bzmn_sn IN (SELECT bzmn_sn FROM dqvs.dvs_rac_mt_agency WHERE up_brno = #{bzmnSn})
				                OR rent.bzmn_sn = #{bzmnSn})
				            </if>
				            <if test="bzauthCd == 2">
				                AND rent.bzmn_sn = #{bzmnSn}
				            </if>
				        </when>
				        <otherwise> <!-- 그 외는 소속 회사의 대여 건만 표시 -->
							<if test="bzmnSn != '' and bzmnSn != null">
			                	AND rent.bzmn_sn = #{bzmnSn}
							</if>
				        </otherwise>
					</choose>
						) as T
					) as A
						WHERE 1 = 1
						<if test="take != '' and take != null">
							AND rn <![CDATA[<=]]>
							(CAST(#{take} AS INTEGER) + CAST(#{skip} AS INTEGER))
						</if>
						<if test="skip != '' and skip != null">
							AND rn <![CDATA[>]]>
							CAST(#{skip} AS INTEGER)
						</if>
		</select>

		<select id="RentalHistListCnt" resultType="int">
			select
			count(*)
			from
			(
						select
							ddvr.reg_dt,
							CASE
							WHEN ddvr.dln ~ '^[0-9]+$' THEN
							CONCAT(ddvr.dln, REPEAT('*', 12))
							ELSE
							CONCAT(SUBSTRING(dqvs.pca_decrypt(ddvr.dln, '150'), -5, LENGTH(dqvs.pca_decrypt(ddvr.dln, '150'))),
							REPEAT('*',6))
							END AS dln2,
							ddvr.mdfcn_dt,
							ddvr.rent_no ,
							ddvr.dln,
							dqvs.fn_get_cdnm('verify_cd', ddvr.lcns_asort_cd) as lcns_asort_cd ,
							(select sso_user_nm from v_intg_user_info vui where vui.user_sn =
							ddvr.mdfr_sn)as mdfr_nm,
							(select sso_user_nm from v_intg_user_info vui where vui.user_sn =
							ddvr.rgtr_sn)as reg_nm,
							agency.co_nm ,
							rent.bzmn_sn, 
							
<!-- 							ddvr.lcns_flnm, -->
							ddvr.lcns_asort_cd
						from dqvs.dvs_dqv_mt_rent rent
<!-- 						from dqvs.dvs_dqv_mt_rent_dump rent -->
						left outer join dqvs.dvs_rac_mt_agency agency on
						rent.bzmn_sn = agency.bzmn_sn
						left join dqvs.dvs_dqv_vrfc_rsvt ddvr on
						ddvr.rent_no = rent.rent_no
						where 
							ddvr.reg_dt <![CDATA[>=]]> #{startDt}::TIMESTAMP
							and ddvr.reg_dt <![CDATA[<=]]> #{endDt}::DATE + '23:59:59'::INTERVAL
				 		<if test="searchCd == 'E1'">
							and ddvr.rent_no like '%' || #{searchWrd} || '%'
						</if>

<!-- 				 		<if test="searchCd == 'E2'"> -->
<!-- 							and ddvr.lcns_flnm like '%' || #{searchWrd} || '%' -->
<!-- 						</if> -->
				 		<if test="lncdDrop != '' and lncdDrop != null">
							and rent.lcns_asort_cd = #{lncdDrop}
						</if>
		<choose>
	        <when test='authrtCd.equals("S01") or authrtCd.equals("S04")'> <!-- 주사무소관리자 : 해당 사용자의 사업자일련번호를 가진 사용자 또는 해당 사업자 일련번호를 상위 사업자로 가지는 업체의 사용자가 조회한 건까지 표시 -->
				AND (rent.bzmn_sn IN (SELECT bzmn_sn FROM dqvs.dvs_rac_mt_agency WHERE up_brno  = #{bzmnSn})
				OR rent.bzmn_sn = #{bzmnSn})
	        </when>
	        <when test='authrtCd.equals("S02")'> <!-- 영업소관리자 : 해당 사업자일련번호를 가진 사용자가 조회한 건만 표시  -->
				AND rent.bzmn_sn = #{bzmnSn}
	        </when>
	        <when test='authrtCd.equals("S03")'> <!-- 주사무소 일반회원, 영업소 일반회원에 따라 조건처리  -->
	            <if test="bzauthCd == 1">
	                AND (rent.bzmn_sn IN (SELECT bzmn_sn FROM dqvs.dvs_rac_mt_agency WHERE up_brno = #{bzmnSn})
	                OR rent.bzmn_sn = #{bzmnSn})
	            </if>
	            <if test="bzauthCd == 2">
	                AND rent.bzmn_sn = #{bzmnSn}
	            </if>
	        </when>
	        <otherwise> <!-- 그 외는 소속 회사의 대여 건만 표시 -->
				<if test="bzmnSn != '' and bzmnSn != null">
                	AND rent.bzmn_sn = #{bzmnSn}
				</if>
	        </otherwise>
		</choose>
			) as T
		</select>

		<select id="SearchRentNo" resultType="resultMap">
			select
			ROW_NUMBER() OVER (ORDER BY reg_dt DESC) AS row_num,
			reg_dt,
			rent_no,
			carmdl,
			rent_bgng_dt,
			rent_end_dt
<!-- 			from dqvs.dvs_dqv_mt_rent_dump -->
			from dqvs.dqvs.dvs_dqv_mt_rent
			<if test="searchRentNo != '' and searchRentNo != null">
				and LOWER(dcms.rent_no) like '%' || LOWER(#{searchRentNo}) || '%'
			</if>
		</select>
		<select id="SearchRentNoCnt" resultType="int">
			select
			count(*)
			from dqvs.dqvs.dvs_dqv_mt_rent
<!-- 			from dqvs.dvs_dqv_mt_rent_dump -->
			<if test="searchRentNo != '' and searchRentNo != null">
				and LOWER(dcms.rent_no) like '%' || LOWER(#{searchRentNo}) || '%'
			</if>
		</select>

		<insert id="insertRsv">
			INSERT INTO dvs_dqv_vrfc_rsvt (
				rent_no,
				vhcl_reg_no,
				dln,
				lcns_asort_cd,
	
				lcns_flnm,
				vrfc_period,
				rsvt_bgng_ymd,
				rsvt_end_ymd,
				last_vrfc_rslt, 
				last_vrfc_ymd, 
				next_vrfc_ymd, 
				rgtr_sn,
				reg_dt,
				reg_ip
			) VALUES (
				#{rentNo},
				#{vhclRegNo},
				#{dln},
				#{lcnsAsortCd},
				'',
				#{periodRsv},
				#{startDt}::timestamp,
				#{endtDt}::timestamp,
				#{lastRst}, 
				now(),
				now(),
				#{rgtrSn}::numeric,
				NOW(),
				#{rgtrIp}
			);
		</insert>

		<update id="updateRsv">
			UPDATE dqvs.dvs_dqv_vrfc_rsvt
			SET
				vrfc_period = #{periodRsv},
				rsvt_bgng_ymd = #{srtDt}::timestamp,
				mdfcn_ip= #{IP},
				mdfr_sn= #{userSn}::numeric,
				mdfcn_dt= now()::timestamp
			WHERE 
			<if test="rentNo != '' and rentNo != null">
				rent_no=#{rentNo}
			</if>
		</update>

		<delete id="deleteRsv">
			DELETE FROM dqvs.dvs_dqv_vrfc_rsvt
			WHERE
			<if test="rentNo != '' and rentNo != null">
				rent_no=#{rentNo}
			</if>
		</delete>
		<select id="PeriodCd" resultType="resultMap">
		select 
			 cd_nm
			,cd
		from dqvs.dvs_cmm_mt_code
		where cd_group = 'vrfc_period'
	</select>
	<select id="LncdDrop" resultType="resultMap">
		select 
			 cd_nm
			,cd
		from dqvs.dvs_cmm_mt_code
		where cd_group = 'verify_cd'
	</select>
	<select id="selectdetailRsv" resultType="resultMap">
			select 
			    rent_no,
			    vhcl_reg_no,
			   	case 
			        WHEN dln ~ '^[0-9]+$' THEN CONCAT(SUBSTRING(dln, 1, 6), REPEAT('*', 6))
			        ELSE CONCAT(SUBSTRING(dqvs.pca_decrypt(dln, '150'), 1, 6), REPEAT('*', 6)) 
			    END as dln,

<!-- 			    lcns_flnm, -->
			    vrfc_period,
			    dqvs.fn_get_cdnm('vrfc_period', vrfc_period) as vrfc_period,
			    rsvt_bgng_ymd,
			    rsvt_end_ymd,
			    dqvs.fn_get_cdnm('verify_cd', lcns_asort_cd) as alcnsAsortCd,
			    lcns_asort_cd,
<!-- 			    case  -->
<!-- 			        WHEN last_vrfc_rslt = '처리완료' THEN '처리완료' -->
<!-- 			        ELSE dqvs.fn_get_cdnm('verify_cd', last_vrfc_rslt) -->
<!--     			END as last_vrfc_rslt, -->
    			CASE
			        when last_vrfc_rslt = '00'or last_vrfc_rslt = '1' or last_vrfc_rslt = '0'
			        then dqvs.fn_get_cdnm('verify_cd', last_vrfc_rslt)
			        else dqvs.fn_get_cdnm('vrfc_rslt', last_vrfc_rslt)
			        end as last_vrfc_rslt,
   			    <!-- dqvs.fn_get_cdnm('verify_cd', last_vrfc_rslt) as last_vrfc_rslt, -->
   			    last_vrfc_rslt,
			    last_vrfc_ymd,
			    next_vrfc_ymd,
			    rgtr_sn,
			    reg_dt,
			    reg_ip,
			    mdfr_sn,
			    mdfcn_dt,
			    mdfcn_ip
			from dqvs.dvs_dqv_vrfc_rsvt
			where rent_no = #{rentNo}
	</select>
	<select id="CheckRentNo" resultType="resultMap">
			select 
			    rent_no
			from dqvs.dvs_dqv_vrfc_rsvt
			where rent_no = #{rentNo}
	</select>
	<select id="CheckRentRsvf" resultType="resultMap">
			select 
		        ddhv.vrfc_rslt,
		        ddhv.vrfc_cd,
		        dqvs.fn_get_cdnm('verify_cd', ddhv.vrfc_cd) as last_vrfc_rslt,
		        ddhv.lcns_asort_cd,
		        ddhv.dln_enc as dln,

<!-- 		        ddhv.lcns_flnm, -->
		        ddhv.vrfc_dmnd_dt,
		        dqvs.fn_get_cdnm('verify_cd', ddhv.lcns_asort_cd) as alcnsAsortCd
		    FROM dqvs.dvs_dqv_hs_verf as ddhv
			WHERE ddhv.vrfc_hstry_sn = #{detaiCLick}
	</select>
</mapper>